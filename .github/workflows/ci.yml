name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Start MongoDB Replica Set
      run: |
        # Start MongoDB with replica set configuration
        echo "Starting MongoDB container..."
        docker run -d \
          --name mongodb-rs \
          -p 27017:27017 \
          mongo:7.0 \
          mongod --replSet rs0 --bind_ip_all
        
        # Check if container started
        echo "Checking container status..."
        docker ps -a --filter name=mongodb-rs
        
        # Show MongoDB logs for debugging
        echo "MongoDB startup logs:"
        docker logs mongodb-rs
        
        # Wait for MongoDB to start with better error handling
        echo "Waiting for MongoDB to start..."
        MONGODB_READY=false
        for i in {1..20}; do
          if docker exec mongodb-rs mongosh --quiet --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; then
            echo "MongoDB is ready after $i attempts"
            MONGODB_READY=true
            break
          fi
          echo "Waiting for MongoDB... ($i/20)"
          
          # Show recent logs if taking too long
          if [ $i -eq 10 ]; then
            echo "MongoDB logs after 10 attempts:"
            docker logs --tail 20 mongodb-rs
          fi
          
          sleep 3
        done
        
        if [ "$MONGODB_READY" != "true" ]; then
          echo "MongoDB failed to start. Final logs:"
          docker logs mongodb-rs
          exit 1
        fi
        
        # Initialize replica set
        echo "Initializing replica set..."
        docker exec mongodb-rs mongosh --eval "
          try {
            rs.initiate({
              _id: 'rs0',
              members: [{ _id: 0, host: 'localhost:27017' }]
            });
            print('Replica set initiated successfully');
          } catch (e) {
            print('Error initiating replica set: ' + e);
            throw e;
          }
        "
        
        # Wait for replica set to be ready
        echo "Waiting for replica set to be ready..."
        RS_READY=false
        for i in {1..15}; do
          if docker exec mongodb-rs mongosh --quiet --eval "
            try {
              var status = rs.status();
              if (status.ok === 1 && status.members && status.members[0].state === 1) {
                print('ready');
              }
            } catch (e) {
              print('not ready');
            }
          " 2>/dev/null | grep -q "ready"; then
            echo "Replica set is ready after $i attempts"
            RS_READY=true
            break
          fi
          echo "Waiting for replica set... ($i/15)"
          sleep 2
        done
        
        if [ "$RS_READY" != "true" ]; then
          echo "Replica set failed to initialize. Status:"
          docker exec mongodb-rs mongosh --eval "rs.status()"
          exit 1
        fi
        
        echo "MongoDB replica set is fully ready!"

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run unit tests
      run: go test -v -short -race -coverprofile=coverage.out ./...

    - name: Initialize MongoDB Replica Set
      run: |
        # Wait for MongoDB to be ready
        for i in {1..30}; do
          if mongosh --quiet --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; then
            echo "MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB... ($i/30)"
          sleep 2
        done
        
        # Initialize replica set
        mongosh --eval "
          rs.initiate({
            _id: 'rs0',
            members: [{ _id: 0, host: 'localhost:27017' }]
          })
        "
        
        # Wait for replica set to be ready
        for i in {1..30}; do
          if mongosh --quiet --eval "rs.status().ok" | grep -q "1"; then
            echo "Replica set is ready"
            break
          fi
          echo "Waiting for replica set... ($i/30)"
          sleep 2
        done

    - name: Run integration tests
      env:
        INTEGRATION_TESTS: "1"
      run: go test -v -race ./tests/integration_test.go -timeout=60s

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="aktuell-$GOOS-$GOARCH.exe"
        else
          BINARY_NAME="aktuell-$GOOS-$GOARCH"
        fi
        go build -ldflags="-s -w" -o "dist/$BINARY_NAME" ./cmd/server
        echo "Built: dist/$BINARY_NAME"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aktuell-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 7

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  react-client:
    name: React Client
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./react-client

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: react-client/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Type check
      run: npm run build

    - name: Upload React build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: react-client-build
        path: react-client/dist/
        retention-days: 7